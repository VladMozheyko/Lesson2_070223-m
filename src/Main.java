import java.lang.instrument.Instrumentation;

public class Main {

    /*
    План занятия
    1) Повторить примитивные типы
    2) Приведение типов
    3) Переполнение типа
    4) Знакомство со String
     */

    /*
    Теория
    Компьютер воспринимает память(набор нулей и единиц) как какой-то тип данных, т.е. интерпретирует эту данные в какой-то
    тип. Иногда бывает необходимо перевести одни тип в другой, тогда возникают варианты:
    Неявное преобразование:
    int a = 10;
    byte b = 5;
    a = b;
    int занимает больше памяти, чем byte, поэтому если мы присовим int-у byte, то компилятор не будет выдавать какие-либо
    предупреждения.
    Например, в бутылку с объемом литр, можно всегда перелить воду из бутылки с объемом 0.5 литра( в этом вся суть неявного
    преобразования - в большее всегда можно поместить меньшее)

    Явное преобразование:
    Если нельзя преобразовать тип неявно, т.е. компилятор ругается на действие, то можно принудительно выполнить
    преоборазование для этого преобразуемую переменную нужно поместить перед блоком (тип к которому приводим), например,
    int a = 100;
    byte b = 10;

    b = (byte)a;
    В данном примере, такое преобразование не вызовет никаких проблем, т.к. int-овое значение помещается в byte и такой
    операцией можно сэкономить память, но если бы int-овое значение не поместилось в byte, подобная операция привела бы к
    потере исходного значения, например,
    int a = 1000;
    byte b = 10;
    b = (byte)a;

    В Java существует класс для работы со строками(набором(массивом) символов), чтобы создать строчную переменную нужно
    так же как и с примитивными типами указать тип String, например:
    String str = "";

    Строки в Java указываются в двойных кавычках, а символы в одинарных

    В Java для работы со строками в классе String допустимо использовать +(конкантенация), т.е. мы можем сложить две
    строки при помощи +;

    Поскольку String ссылочный тип, к нему прилагается ряд методов(функции и процедуры) для работы со строками, которые
     можно вызывать через точку в переменной, например:
     str.length(); - такой вызов метода length() вернет длину(количество символов) в строке.
     */

    /*
    Заметки
    Руководство по тому как пользоваться кодом: т.е. какой класс что делает, какой метод что делает - называется API.
     */


    public static void main(String[] args) {

        System.out.println("Пример неявного преобразования: ");
        byte a = 70;                                               // Объявляем переменную byte
         int b;                                                    // Объявляем переменную int
         b = a;

         // Неявное приведение типа
         System.out.println("a " + a + " " + "b " + b);

        System.out.println("Пример явного преобразования: ");

         int x = 50;                                                // Объявляем переменную int
         byte y = (byte)x;                                          // Объявляем переменную byte явно приводим к ней переменную int
         System.out.println("x=" + x + " " + "y=" + y);             // В данном случае значение int помещается в byte, поэтому проблем нет
         x = 1000;                                                  // Присвоили в int значение, которое больше byte
         System.out.println("x=" + x + " " + "y=" + y);
         y = (byte)x;                                               // Явно приводим int к byte

        System.out.println("x=" + x + " " + "y=" + y);              // За счет того, что int полностью не вместился в byte, мы потеряли значение

         String str;                                                // Объявляю(декларирую) переменную String

         str = "Hello, World!";                                     // Впервые присваиваю(инициализирую) переменную str

         System.out.println(str);                                   // Выводим переменную str

         System.out.println(str.length());                          // Выводим длину(количество символов) str

         System.out.println(str + " " + '$');                       // Выводим str и прибавляем пробел и символ $

         str = str + "$";                                           // Прибавляем к str символ $

         System.out.println(str);                                   // Выводим новое значение str

         System.out.println(str.charAt(5));                         // Вывожу символ в заданной позиции

         System.out.println(str.charAt(7));                         // Вывожу символ в заданной позиции

         System.out.println(str.indexOf('W')) ;                     // Выводу символ по его позиции

         System.out.println(str.replace('l', 'k'));                 // Меняем все символы l на K  и выводим строку на консоль

         System.out.println(str);                                   // Верхний метод вернул строку с измененными символами, но заменил исходную строку

         str = str.replace('l', 'k');                               // Присваиваем переменной измененную строку, теперь str всегда будет содержать измененные символы

         System.out.println(str);                                   // Выводим str

         System.out.println(str.replaceFirst("k" , "l"));           // Метод меняет только первый символ, который совпал с переданным в него

         System.out.println(str.substring(5));                      // Вывожу подстроку с 5 индекса

         System.out.println(str.substring(0, 7));                   // Выводим подстроку с указанием границ начала и конца подстроки

         System.out.println(str.toLowerCase());                     // Выводим строку с маленькими буквами(нижний регистр)

         System.out.println(str.toUpperCase());                     // Выводим строку с большими буквами(верхний регистр)

    }
}
